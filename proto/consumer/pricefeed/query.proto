syntax = "proto3";
package consumer.pricefeed;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "consumer/pricefeed/params.proto";
import "consumer/pricefeed/pricefeed.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/bandprotocol/consumer/x/pricefeed/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/consumer/pricefeed/params";
  }
  rpc SymbolRequest(QuerySymbolRequest) returns (QuerySymbolRequestResponse) {
    option (google.api.http).get = "/consumer/pricefeed/symbol_request/{symbol}";
  }
  rpc SymbolRequests(QuerySymbolRequests) returns (QuerySymbolRequestsResponse) {
    option (google.api.http).get = "/consumer/pricefeed/symbol_requests";
  }
  rpc Price(QueryPrice) returns (QueryPriceResponse) {
    option (google.api.http).get = "/consumer/pricefeed/price/{symbol}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QuerySymbolRequest { string symbol = 1; }

message QuerySymbolRequestResponse {
  SymbolRequest symbol_request = 1;
}


message QuerySymbolRequests {}

message QuerySymbolRequestsResponse {
  repeated SymbolRequest symbol_requests = 1;
}


message QueryPrice { string symbol = 1; }

message QueryPriceResponse {
  Price price = 1;
}
